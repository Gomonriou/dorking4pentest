import argparse
import csv
import requests
import webbrowser


def get_queries(filename):
    with open(filename, newline='') as csvfile:
        reader = csv.reader(csvfile, delimiter=',')
        rows = []
        for row in reader:
            rows.append((row[0].strip("'"), row[1].strip("'")))
    return rows


def print_info(queries):
    print("{:<30} {}".format("Description", "Query"))
    print("-" * 70)
    for query in queries:
        desc = query[2][:30] + "..." if len(query[2]) > 30 else query[2]
        qry = query[1][:60] + "..." if len(query[1]) > 60 else query[1]
        print("{:<30} {}".format(desc, qry))


def user_search(query, username):
    url = query.replace("{{USER}}", username)
    response = requests.get(url)
    if response.status_code == 200:
        print(f"User {username} has an account at {url}")
    else:
        print(f"User {username} does not have an account at {url}")


def url_search(query, domain):
    dorks = query.replace("{{DOMAIN}}", domain)
    webbrowser.open_new_tab('https://www.google.com/search?q=' + dorks)


def main():
    parser = argparse.ArgumentParser(
        description='This program searches for a specified URL in multiple dorking query files.')
    parser.add_argument('--domain', help='TO VERIFY Domain to query, use domain.com will search in sub-domain too, use '
                                         'https://domain.com will restric to https protocol and don t search in '
                                         'subdomain', required=True)
    parser.add_argument('--files', help='List of query files, if no query file is specified, the program will use '
                                        'base.csv. --files file1.csv file2.csv ', nargs='+', default=['./queries_file/base.csv'])
    parser.add_argument('--user', help='User name, for search differents account BUT nuclei is better')
    parser.add_argument('--info', help='Print the query descriptions with their corresponding query', action='store_true')
    args = parser.parse_args()

    queries = []
    for filename in args.files:
        queries.extend([(filename, query[0], query[1]) for query in get_queries(filename)])
    if args.info:
        print_info(queries)
        input("\nPress Enter to search, or CTRL+C to stop... Attention! if your file is too long it will open a lot of tabs ")
    for query in queries:
        if '{{USER}}' in query[1]:
            user_search(query[1], args.user)
        if '{{DOMAIN}}' in query[1]:
            url_search(query[1], args.domain)


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\ninterruption")
    except Exception as e:
        print(e)